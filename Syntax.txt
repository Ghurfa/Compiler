out parameter
semicolons ?
tuples
why not type inference for local vars?
Linq 
Python * (repeat for every item in array)
SQL select?
Constructor syntax 
Multiple inheritances (ruby modules?)
Short if/else stack
Built in lists
Built in ordered lists (sequences)
Unions
Control blocks as expressions
Code block statement as anonymous function
?: cast operator

problem w/ how symbols are tokenized
    genericThing<thing<int>>
    }} operator breaks two curly braces
    something like ::> couldn't be parsed if :: is not defined

todo: convert LinkedList<token> to tokenCollection
    make tokentypes more specific
    convert tokens text to spans (better space)


myArray int[4] = {101, 102, 103, 104},

i := 0

(condition)
?

;

()
{

}
=== Field Declarations ===
myVar:Modifiers Type
	x:int
	x:public myClass
myVar = DefaultVal : Modifiers Type
	x : public static int = 2 
	x : public myClass = new myClass() 
	x : public int = getX(12) 
myVar := DefaultVal : Modifiers
    x := 2 : public static
    x := 2 ;
    See https://docs.microsoft.com/en-us/archive/blogs/ericlippert/why-no-var-on-fields

=== Property Declarations ===
myProp => expression : Modifiers Type
	getX => x : public static int
myProp :> expression : Modifiers
	getX :> 17 : public static
myProp {get set stuff}

=== Method Declarations ===
myMethod public static int(param1:type1, param2:type2, param3:out type3) {statements}
	add public static int(a:int, b:int)
	{

	}

===Expressions===
expr operator expr
expr  "?"  expr  ":"  expr
unaryExpr assignmentOperator expr

Unary Expression
    +unaryExpr
    -unaryExpr
    ++unaryExpr
    --unaryExpr
    !unaryExpr
    ~unaryExpr
    *unaryExpr
    Cast Expression
        unaryExpr "as" type
            myDouble:double = myFloat as double 
    Primary Expression
        Tuple Expression
            "(" {expr + ","}+ ")"
        Literal
            int literal
                hexadecimal
            string literal
            char literal
        "new"  type  "("  arguments  ")"
            public class B {
                static int staticVal;
                int val;
                public B(int val) => this.val = val;
                public void SetBStaticVal() => staticVal = val;
            }
            public class C {
                public void M() {
                    new B(2).SetBStaticVal();
                }
            }
        "new"  type  "["  count?  "]"
        identifier
        "("  expr  ")"
        "this"
        "typeof"  "("  type  ")"
        Assignable Expression
            identifier                          duplicate
            primaryExpr  "("  arguments  ")"
            primaryExpr  "."  identifier
            predefinedType  "."  identifier
            "base"  "."  identifier
            "base"  "["  expressions  "]"
            primaryExpr  "["  expressions  "]"
            primaryExpr++                       should include?
            
        Complete Expression
            primaryExpr  "("  arguments  ")"    duplicate
            primaryExpr++
                num++.ToString();
            primaryExpr--
===Statement Expressions===
    completeExpression
    ++primaryExpression         should allow?
        conflict:
            a++
            ++b (possible, but hard to parse)
    --primaryExpression
    unaryExpr assignment expression (spec)
        ???
        ++a += 2   (won't include)
    assignableExpr assignment expression

===Statements===
Variable Declaration
    {identifier "," }+  ":"  type
	    a:int
        a,b,c:int
    {identifier "," }+  ":="  expression  ";"
	    a := 3;
	    a,b,c := 3;
    {identifier "," }+  "="  expression  ":" type
        a = null : Ball
Tuple Declarations
    Should not allow? Non-named tuples not useful
        (a,b):(int, int)
        (a,b) = (2, 3) : (int, int)
        (a,b) := (2, 3)
    Normal var declarations
        c = (a, b) : (int, int)
        c := (a, b)
Code Block
    "{"  statement+  "}"
    ";"
Control Block
    "if"  "("  condition  ")"  codeBlock
    "switch"  "("  expression  ")"  switchCodeBlock
    "while"  "("  condition  ")"  codeBlock
    "for"  "("  statement statement statement  ")"  codeBlock
    "foreach"  "("  identifier  ":"  type  "in"  expression  ")"  codeBlock
Jump Statement
    "break"
    "continue"
    "return"
        needs semicolon?
            return 
            a.func()
            would need to check return type
    "exit"
        void return?
    "throw"
Statement Expression
    statementExpression  ";"