$Expression
>#GeneratedExpressions
{
    +Expression
    >Expressions
    ~BinaryExpression
    {
        //Assignment Expression
        =UnaryExpression:To;argument Token Expression:From
        >AssignmentExpressions
        +ICompleteStatement
        ~AssignmentExpression
        :override int Precedence=14
        {
            Assign
            DeclAssign
            PlusAssign
            MinusAssign
            MultiplyAssign
            DivideAssign
            ModuloAssign
            BitwiseAndAssign
            BitwiseOrAssign
            BitwiseXorAssign
            LeftShiftAssign
            RightShiftAssign
            NullCoalescingAssign
        }

        //Binary Expressions
        =Expression:Left;argument Token Expression:Right
        {
            >BinaryOperators
            {
                :override int Precedence=3
                Plus
                Minus
                
                :override int Precedence=2
                Asterisk:Multiply
                Divide
                Modulo

                :override int Precedence=4
                LeftShift
                RightShift

                :override int Precedence=7
                BitwiseAnd

                :override int Precedence=9
                BitwiseOr
                
                :override int Precedence=8
                BitwiseXor

                :override int Precedence=12
                NullCoalescing
                
                :override int Precedence=10
                And
                
                :override int Precedence=11
                Or
            }

            >CompareOperators
            {
                :override int Precedence=6
                Equals
                NotEquals

                :override int Precedence=5
                GreaterThan
                LessThan
                GreaterThanOrEqualTo
                LessThanOrEqualTo
            }
        }

        :override int Precedence=1
        .Cast
        UnaryExpression:Expression;argument
        AsKeyword
        Type:CastTo

        :override int Precedence=13
        .If
        Expression:Condition;argument
        QuestionMark
        Expression:IfTrue
        Backslash
        Expression:IfFalse
    }

    //UnaryExpressions
    +UnaryExpression
    ~UnaryExpression
    =Token UnaryExpression:BaseExpression
    >UnaryOperatorExpressions
    {
        Not:LogicalNot
        BitwiseNot
        Plus:UnaryPlus
        Minus:UnaryMinus

        ~IncrDecr
        Increment:PreIncrement
        Decrement:PreDecrement
        
        +IAssignableExpression
        Asterisk:Dereference
    }

    //Primary Expressions
    +PrimaryExpression
    >PrimaryExpressions
    {
        .ArrayAccess
        +IAssignableExpression
        PrimaryExpression:Array;argument
        OpenBracket
        Expression:Index
        CloseBracket

        .Declaration
        +IAssignableExpression
        +ICompleteStatement
        Identifier;argument
        Colon;argument
        Type

        .MemberAccess
        +IAssignableExpression
        PrimaryExpression:BaseExpression;argument
        Dot
        Identifier:Item

        .MethodCall
        +ICompleteStatement
        PrimaryExpression:Method;argument
        OpenPeren
        ArgumentList:argument
        ClosePeren

        .NewObject
        +ICompleteStatement
        NewKeyword;argument
        Type
        OpenPeren
        ArgumentList:argument
        ClosePeren

        .NewArray
        +ICompleteStatement
        NewKeyword;argument
        Type;argument

        .NullCondArrayAccess
        +IAssignableExpression
        PrimaryExpression:Array;argument
        NullCondOpenBracket
        Expression:Index
        CloseBracket

        .NullCondMemberAccess
        +IAssignableExpression
        PrimaryExpression:BaseExpression;argument
        NullCondDot
        Identifier:Item

        .Perenthesized
        OpenPeren;argument
        Expression;argument
        ClosePeren;argument

        ~IncrDecr
        +ICompleteStatement
        {
            .PostIncrement
            PrimaryExpression:BaseExpression;argument
            Increment

            .PostDecrement
            PrimaryExpression:BaseExpression;argument
            Decrement
        }

        >ValueExpressions
        {
            .Identifier
            +IAssignableExpression
            Identifier;argument

            .PrimitiveType
            PrimitiveType;argument

            .ValueKeyword
            ValueKeyword;argument

            .Tuple
            OpenPeren;argument
            TupleItemList:Values;argument
            ClosePeren
        }

        >Literals
        {
            .IntLiteral
            IntLiteral;argument

            .StringLiteral
            DoubleQuote:OpenQuote;argument
            StringLiteral:Text
            DoubleQuote:CloseQuote
            
            .CharLiteral
            SingleQuote:OpenQuote;argument
            CharLiteral:Text
            SingleQuote:CloseQuote

            .TrueLiteral
            TrueKeyword;argument

            .FalseLiteral
            FalseKeyword;argument
        }
    }
}