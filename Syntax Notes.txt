out parameter
semicolons ?
tuples
why not type inference for local vars?

Code block statement as anonymous function
combining binary expressions
    bool x = y$(>2 && <5)
    bool x = $(y || z) < 12
    bool x = 
    === Switch expression ===
a:bool = y switch {
    12, _ -> true,
    14 -> false
    }
=== Make tokens separate types ===
=== Make assignmentExpressions and binaryOperatorExpressions check type of token ==
=== Reconsider colon marking variable declaration ===
    Named parameters
    If expressions
    if(a is b:B)
    
=== Is Expression ===
    c#: if(a is B b)
    current: if(?(b:B as a))
    if(a is b:B)
        [a is] (identifier) (token)
            >declarator
            >type
    
=== Null Check Operator ===
    ?a = a != null
=== trailing comma in argument parses without error ===
=== Throw Expression ===
    a ?? throw new InvalidOperationException()

=== Short if/else stack ===
    Something like
        ? a == 2 -> return true
        \ b -> {t++; return false}
    isn't a huge improvement over normal if/else

=== Enforce semicolon if same line ===

=== Lambdas ===
    Statement and expressions
    
=== Multiple key switch ===
switch(val1, val2)
{
case 18, 19:
break;
}
Should just be switch on tuple?

=== Built in Types ===
Built in lists
    [1, 2, 3, 4]
Built in ordered lists (sequences)
    Should just be lists?
Built in dictionaries
    [1 -> true, 
     2 -> false]
Built in enumerables

=== Tuples ===
=== Tiered Namespaces ===
=== Null & Default Keywords ===
=== Default operator ===

=== Linq ===
    intArr where num:int
    
=== Actions and Funcs ===

=== Local Functions ===

=== Combining expressions ===
bool x = y$(>=0 && <100)

=== Cleaner Constructor Syntax ===
    Calling syntax isn't that bad; not a priority
    Declaration
        
    Calling
        a := new Xyz()

=== Harder/Less useful stuff ===
Python * (repeat for every item in array)
Multiple inheritances (ruby modules?)
Code block statement as anonymous function
?: cast operator
Unions

problem w/ how symbols are tokenized
    genericThing<thing<int>>
    }} operator breaks two curly braces
    something like ::> couldn't be parsed if :: is not defined

    make tokentypes more specific
    convert tokens text to spans (better space)


myArray int[4] = {101, 102, 103, 104},

i := 0

(condition)
?

;

()
{

}